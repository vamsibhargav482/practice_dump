#!/usr/bin/env python3

import time
import easysnmp
import sys
from collections import defaultdict

def prober(agent, sample_frequency, samples, oids):
    session = easysnmp.Session(hostname=agent[0], remote_port=int(agent[1]), community=agent[2], version=2)
    counter_values = defaultdict(list)
    counter_times = defaultdict(list)
    sample_count = 0

    max_value_32 = 2**32 - 1
    max_value_64 = 2**64 - 1

    # Initialize prev_values with the first sample values
    try:
        sysUpTime = int(session.get('1.3.6.1.2.1.1.3.0').value)
        for oid in oids:
            result = session.get(oid)
            counter_values[oid].append(int(result.value))
            counter_times[oid].append(sysUpTime)
    except easysnmp.EasySNMPTimeoutError:
        print('Timeout error, the device did not respond in time.')
        return
    except easysnmp.EasySNMPError as error:
        print(f'Error: {error}')
        return

    while sample_count < samples or samples == -1:
        start_time = time.time()
        try:
            current_time = int(time.time())
            sysUpTime = int(session.get('1.3.6.1.2.1.1.3.0').value)
            rates = []

            for oid in oids:
                result = session.get(oid)
                counter_values[oid].append(int(result.value))
                counter_times[oid].append(sysUpTime)

                if len(counter_values[oid]) > 1:
                    prev_value = counter_values[oid][-2]
                    curr_value = counter_values[oid][-1]
                    prev_time = counter_times[oid][-2]
                    curr_time = counter_times[oid][-1]

                    if curr_value < prev_value:  # Handle wrap-around
                        max_value = max_value_64 if prev_value > max_value_32 else max_value_32
                        rate = ((max_value - prev_value + curr_value + 1) / (curr_time - prev_time)) * 100
                    else:
                        rate = ((curr_value - prev_value) / (curr_time - prev_time)) * 100

                    rates.append(rate)
                else:
                    rates.append(0)  # Not enough data to calculate rate

            print(f"{current_time} | " + " | ".join(f"{rate:.2f}" for rate in rates))
            sample_count += 1

        except easysnmp.EasySNMPTimeoutError:
            print('Timeout error, the device did not respond in time.')
        except easysnmp.EasySNMPError as error:
            print(f'Error: {error}')

        end_time = time.time()
        elapsed_time = end_time - start_time
        sleep_time = max(1/sample_frequency - elapsed_time, 0)
        time.sleep(sleep_time)

if __name__ == "__main__":
    agent = sys.argv[1].split(':')
    sample_frequency = float(sys.argv[2])
    samples = int(sys.argv[3])
    oids = sys.argv[4:]
    prober(agent, sample_frequency, samples, oids)